git 知识点小结：
1.git安装成功之后，需要进行设置；
git config --global user.name 'suihongke'
git config --global user.email '289851676@qq.com'
因为git是分布式版本控制系统，每台机器都必须自报家门：你的名字和email地址
注意：用了 git config和global参数标识本机的所有git仓库都会使用这个配置，当然也可以对某个特定仓库指定不同的用户名和Email地址
2.创建git本地仓库时，文件目录最好不要有中文
3.git init 命令把创建的目录变成git可管理的仓库，命令运行之后，文件夹中会多出一个.git文件夹，是用来跟踪管理版本库的，千万不要随便乱改
4.git跟踪不了二进制文件的改动：word,图片，视频等，但是可以跟踪到文件大小的变化
5.千万不要使用windows自带的记事本编辑文件，最好使用Notepad++,记得把默认编码设置为UTF-8
6.正常操作流程：git add <file>  --> git commit -m '备注' --> git push
7.版本回退：git reset --hard commit_id 或者 git reset --hard^. head 是指当前版本
git log 可以查看提交历史，如果历史较多，不方便查看，可以使用　git log --pretty=oneline，该命令用于确定要回退到历史哪个版本
git reflog 可以查看命令历史，用于确定要回退到未来哪个版本
8.暂存区是git非常重要的概念
9.git diff head -- <file> 用于查看版本库文件和工作区文件的区别
10.撤销修改：a.还没放到暂存区：git checkout -- <file>  b:已经放到暂存区：git reset HEAD -- <FILE>，然后git checkout -- <file> c：已提交到本地版本库，直接回复历史版本即可，已推送远程版本库，好吧，自求多福吧
11.删除文件：git rm <file>
12.关联远程版本库
a.登陆github,新建远程版本库，一路默认即可
b.在本地仓库下运行命令 git remote add origin git@github.com:suihongke/myGit.git,远程库的名字就是origin
c.然后再运行  git push -u origin master ,第一次推送加了 -u 参数，git不仅会把本地的master分支内容推送到远程新的master，还会把本地的master和远程的master关联起来，在以后推送或者拉取时就可以简化命令
分布式最大的好处就是在本地工作完全不用考虑远程库的存在，就是没有联网都可以正常工作，当有网的时候再推送即可
13.把远程版本库克隆到本地开发：git clone git@github.com:suihongke/myProject.git 
git支持多种网络协议，默认git://使用ssh,但也可以使用https等其他网络协议，ssh协议速度更快，https的每次推送都需要口令。
14.分支管理：
（1）新增并切换分支:git switch -c '分支名称'/git checkout -b '分支名称'                                                
（2）查看分支： git branch
（3）创建分支： git brahch <name>
（4）切换分支： git checkout <name> /git swithc <name>
（5）合并分支到当前分支： git merge <name>
（6）删除分支： git branch -d <name>
15.解决冲突：当两个分支同时修改一个文件，并都在各自分支提交时，再合并时，会报错，需要先手动解决冲突之后再合并
 git log --graph --pretty=oneline --abbrev-commit 命令可以看到分支合并图
（1）git log --graph命令可以看到分支合并图
（2）git merge --no-ff -m '注释说明' brahchName  带--no-ff参数时表示禁用fast forward 合并后的历史有分支信息，而fast forward 看不出来之前做过合并
16.bug分支
（1）解决bug时，通常新建bug分支修复，然后合并，最后删除
（2）当手头工作没有解决完成时候，先把git stash，修复bug之后再git stash pop,回到工作现场
（3）再master分支上做的修复，想要同步到dev上，可直接使用命令 git cherry-pick <commitID> ,把bug修复提交的修改同步到当前分支，避免重复劳动
（4）如果在删除一个没有合并过得分支，可以通过Git brahch -D <name> 强行删除
（5）查看远程库信息，使用git remote -v；
（6）本地新建的分支如果不推送到远程，对其他人就是不可见的；
（7）从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
（8）在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
（9）建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
（10）从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
17.Git多人合作模式
（1）首先可是试图用git  push  origin  <branch name>来推送自己的修改
（2）如果推送失败，则是因为远程分支比你的本地更新，需要先git pull试图合并
（3）如果合并有冲突，则解决冲突，并在本地提交
（4）没有冲突或解决冲突之后再用git push origin <branchname> 推送就能成功
（5）吐过git pull 提示no tracking infomation则说明本地分支和远程分支的连接关系没有创建，用命令 git branch --set-upstream-to <branchname> origin/<brancName> 
18.git rebase可以把本地未push的分支整理成直线，目的是使得我们查看历史提交的变化时更容易，因为分叉的提交需要三方对比
19.git 标签
（1）命令git tag <tagname> 用于新建一个标签，默认为head,也可以制定一个commit id
（2）命令git tag -a <tagname> -m '标签说明信息' 可以制定标签信息
（3）命令git tag可以查看所有标签
（4）git push origin <tagname> 可以推送一个本地标签
（5）git push origin --tags 可以推送全部未推送过得本地标签
（6）git tag -d <tagname> 可以删除一个本地标签
（7）git push origin :refs/tags/<tagname> 可以删除一个远程标签
20.自定义git 
（1）git config --global color.ui.true 可以让git显示显色 
（2）忽略特殊文件需要编写.gitignore,改文件需要放进版本库里，并且可以对本文件版本管理
（3）给命令配置别名 git config --global alias.st status   配置之后  git st = git status
21.搭建git 服务器（linux）
（1）安装git: sudu apt-get install git
（2）创建一个git用户，用来运行git: sudu adduser git
（3）创建证书登陆
收集所有需要登陆的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入/home/git/.ssh/authorized_keys 中，一行一个
（4）初始化git仓库：选定一个目录作为git仓库。假定是/srv/sample.git,在/srv目录下输入命令：sudu git init --bare sample.git 
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
sudo chown -R git:git sample.git
（5）禁用shell登陆
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行 
git:x:1001:1001:,,,:/home/git:/bin/bas 改为：git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出
（6）克隆远程仓库 $ git clone git@server:/srv/sample.git
（7）如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。
22.sourceTree 免费Git图形界面工具
